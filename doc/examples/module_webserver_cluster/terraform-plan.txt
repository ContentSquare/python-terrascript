Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.aws_availability_zones.all: Refreshing state...
The Terraform execution plan has been generated and is shown below.
Resources are shown in alphabetical order for quick scanning. Green resources
will be created (or destroyed and then created if an existing resource
exists), yellow resources are being changed in-place, and red resources
will be destroyed. Cyan entries are data sources to be read.

Note: You didn't specify an "-out" parameter to save this plan, so when
"apply" is called, Terraform can't guarantee this is what will execute.

+ aws_autoscaling_group.example
    arn:                                "<computed>"
    availability_zones.#:               "6"
    availability_zones.1252502072:      "us-east-1f"
    availability_zones.1305112097:      "us-east-1b"
    availability_zones.2762590996:      "us-east-1d"
    availability_zones.3551460226:      "us-east-1e"
    availability_zones.3569565595:      "us-east-1a"
    availability_zones.986537655:       "us-east-1c"
    default_cooldown:                   "<computed>"
    desired_capacity:                   "<computed>"
    force_delete:                       "false"
    health_check_grace_period:          "300"
    health_check_type:                  "ELB"
    launch_configuration:               "${aws_launch_configuration.example.id}"
    load_balancers.#:                   "1"
    load_balancers.2727694150:          "webservers-stage"
    max_size:                           "2"
    metrics_granularity:                "1Minute"
    min_size:                           "2"
    name:                               "<computed>"
    protect_from_scale_in:              "false"
    tag.#:                              "1"
    tag.2305202985.key:                 "Name"
    tag.2305202985.propagate_at_launch: "true"
    tag.2305202985.value:               "webservers-stage"
    target_group_arns.#:                "<computed>"
    vpc_zone_identifier.#:              "<computed>"
    wait_for_capacity_timeout:          "10m"

+ aws_elb.example
    availability_zones.#:                   "6"
    availability_zones.1252502072:          "us-east-1f"
    availability_zones.1305112097:          "us-east-1b"
    availability_zones.2762590996:          "us-east-1d"
    availability_zones.3551460226:          "us-east-1e"
    availability_zones.3569565595:          "us-east-1a"
    availability_zones.986537655:           "us-east-1c"
    connection_draining:                    "false"
    connection_draining_timeout:            "300"
    cross_zone_load_balancing:              "true"
    dns_name:                               "<computed>"
    health_check.#:                         "1"
    health_check.0.healthy_threshold:       "2"
    health_check.0.interval:                "30"
    health_check.0.target:                  "HTTP:8080/"
    health_check.0.timeout:                 "3"
    health_check.0.unhealthy_threshold:     "2"
    idle_timeout:                           "60"
    instances.#:                            "<computed>"
    internal:                               "<computed>"
    listener.#:                             "1"
    listener.3931999347.instance_port:      "8080"
    listener.3931999347.instance_protocol:  "HTTP"
    listener.3931999347.lb_port:            "80"
    listener.3931999347.lb_protocol:        "HTTP"
    listener.3931999347.ssl_certificate_id: ""
    name:                                   "webservers-stage"
    security_groups.#:                      "<computed>"
    source_security_group:                  "<computed>"
    source_security_group_id:               "<computed>"
    subnets.#:                              "<computed>"
    zone_id:                                "<computed>"

+ aws_launch_configuration.example
    associate_public_ip_address: "false"
    ebs_block_device.#:          "<computed>"
    ebs_optimized:               "<computed>"
    enable_monitoring:           "true"
    image_id:                    "ami-40d28157"
    instance_type:               "t2.micro"
    key_name:                    "<computed>"
    name:                        "<computed>"
    root_block_device.#:         "<computed>"
    security_groups.#:           "<computed>"
    user_data:                   "8ce78fe83de31d71135e4fefec28556a291ecc86"

+ aws_security_group.elb
    description: "Managed by Terraform"
    egress.#:    "<computed>"
    ingress.#:   "<computed>"
    name:        "webservers-stage-elb"
    owner_id:    "<computed>"
    vpc_id:      "<computed>"

+ aws_security_group.instance
    description: "Managed by Terraform"
    egress.#:    "<computed>"
    ingress.#:   "<computed>"
    name:        "webservers-stage-instance"
    owner_id:    "<computed>"
    vpc_id:      "<computed>"

+ aws_security_group_rule.allow_all_outbound
    cidr_blocks.#:            "1"
    cidr_blocks.0:            "0.0.0.0/0"
    from_port:                "0"
    protocol:                 "-1"
    security_group_id:        "${aws_security_group.elb.id}"
    self:                     "false"
    source_security_group_id: "<computed>"
    to_port:                  "0"
    type:                     "egress"

+ aws_security_group_rule.allow_http_inbound
    cidr_blocks.#:            "1"
    cidr_blocks.0:            "0.0.0.0/0"
    from_port:                "80"
    protocol:                 "tcp"
    security_group_id:        "${aws_security_group.elb.id}"
    self:                     "false"
    source_security_group_id: "<computed>"
    to_port:                  "80"
    type:                     "ingress"

+ aws_security_group_rule.allow_server_http_inbound
    cidr_blocks.#:            "1"
    cidr_blocks.0:            "0.0.0.0/0"
    from_port:                "8080"
    protocol:                 "tcp"
    security_group_id:        "${aws_security_group.instance.id}"
    self:                     "false"
    source_security_group_id: "<computed>"
    to_port:                  "8080"
    type:                     "ingress"

+ aws_security_group_rule.allow_testing_inbound
    cidr_blocks.#:            "1"
    cidr_blocks.0:            "0.0.0.0/0"
    from_port:                "12345"
    protocol:                 "tcp"
    security_group_id:        "${aws_security_group.elb.id}"
    self:                     "false"
    source_security_group_id: "<computed>"
    to_port:                  "12345"
    type:                     "ingress"
Plan: 9 to add, 0 to change, 0 to destroy.
